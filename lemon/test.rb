#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.15
# from Racc grammer file "".
#

require 'racc/parser.rb'
class TestLanguage < Racc::Parser
##### State transition tables begin ###

racc_action_table = [
     4,     5,     4,     5,     6,     8,     9 ]

racc_action_check = [
     0,     0,     3,     3,     1,     5,     6 ]

racc_action_pointer = [
    -2,     4,   nil,     0,   nil,     1,     6,   nil,   nil,   nil ]

racc_action_default = [
    -5,    -5,    -1,    -5,    -3,    -5,    -5,    -2,    -4,    10 ]

racc_goto_table = [
     2,     1,   nil,     7 ]

racc_goto_check = [
     2,     1,   nil,     2 ]

racc_goto_pointer = [
   nil,     1,     0,   nil ]

racc_goto_default = [
   nil,   nil,   nil,     3 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 6, :_reduce_1,
  2, 7, :_reduce_2,
  1, 7, :_reduce_3,
  2, 8, :_reduce_4 ]

racc_reduce_n = 5

racc_shift_n = 10

racc_token_table = {
  false => 0,
  :error => 1,
  :FINISH_PARSING => 2,
  :BIND => 3,
  String => 4 }

racc_nt_base = 5

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "FINISH_PARSING",
  "BIND",
  "STRING_LIT",
  "$start",
  "prog",
  "prog_list",
  "bind" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'test.y', 9)
  def _reduce_1(val, _values, result)
     result = { type: "PROG", value: "", children: val[0] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'test.y', 11)
  def _reduce_2(val, _values, result)
     val[1] << val[0]; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'test.y', 12)
  def _reduce_3(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'test.y', 14)
  def _reduce_4(val, _values, result)
     result = { type: "BIND", value: val[1], children: [] } 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class TestLanguage
